// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using NewspaperCMS.Models;

namespace NewspaperCMS.Data
{
    public partial class NewspaperCMSContext : DbContext
    {
        public NewspaperCMSContext()
        {
        }

        public NewspaperCMSContext(DbContextOptions<NewspaperCMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<article> articles { get; set; }
        public virtual DbSet<category> categories { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=NewspaperCMS;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<article>(entity =>
            {
                entity.HasMany(d => d.category_names)
                    .WithMany(p => p.articles)
                    .UsingEntity<Dictionary<string, object>>(
                        "article_category",
                        l => l.HasOne<category>().WithMany().HasForeignKey("category_name").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("category_fk"),
                        r => r.HasOne<article>().WithMany().HasForeignKey("article_id").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("article_fk"),
                        j =>
                        {
                            j.HasKey("article_id", "category_name").HasName("article_category_pk");

                            j.ToTable("article_category");

                            j.IndexerProperty<string>("category_name").HasMaxLength(20).IsUnicode(false);
                        });
            });

            modelBuilder.Entity<category>(entity =>
            {
                entity.HasKey(e => e.category_name)
                    .HasName("PK__category__5189E254CD3155B8");

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}